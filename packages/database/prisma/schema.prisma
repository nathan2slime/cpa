datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../dist"
  previewFeatures = ["prismaSchemaFolder"]
  binaryTargets   = ["debian-openssl-1.1.x", "linux-musl-openssl-3.0.x", "darwin", "darwin-arm64", "debian-openssl-3.0.x", "windows"]
}

enum CourseType {
  TECH
  HUMAN
  HEALTH
}

enum QuestionType {
  TEXT
  CHOOSE
  CHOOSE_AND_TEXT
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Session {
  id           String  @id @default(uuid())
  refreshToken String?
  accessToken  String?
  isExpired    Boolean @default(false)
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}

model User {
  id       String    @id @default(uuid())
  password String
  name     String?
  surname  String?
  login    String    @unique
  sessions Session[]
  roles    Role[]    @default([USER])
  answers  Answer[]
  courseId String?
  course   Course?   @relation(fields: [courseId], references: [id])

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}

model Course {
  id          String        @id @default(uuid())
  type        CourseType
  name        String
  courseEvent CourseEvent[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
  User      User[]
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  events TagOnEvent[]
  forms  TagOnForm[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model TagOnEvent {
  id      String @id @default(uuid())
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([tagId, eventId])
}

model TagOnForm {
  id     String @id @default(uuid())
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
  form   Form   @relation(fields: [formId], references: [id])
  formId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([tagId, formId])
}

model Event {
  id          String  @id @default(uuid())
  title       String
  description String
  responsible String
  active      Boolean @default(true)

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  startDate DateTime?
  endDate   DateTime?

  courses CourseEvent[]
  answers Answer[]

  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime?    @updatedAt
  TagOnEvent TagOnEvent[]
}

model CourseEvent {
  id String @id @default(uuid())

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}

model Form {
  id    String @id @default(uuid())
  title String

  questions Question[]
  answers   Answer[]
  event     Event[]

  createdAt DateTime    @default(now())
  deletedAt DateTime?
  updatedAt DateTime?   @updatedAt
  TagOnForm TagOnForm[]
}

model QuestionOption {
  id String @id @default(uuid())

  title String
  order Int    @default(0)

  question       Question?        @relation(fields: [questionId], references: [id])
  questionId     String?
  questionAnswer QuestionAnswer[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}

model Question {
  id    String @id @default(uuid())
  title String

  type QuestionType @default(TEXT)

  options QuestionOption[]
  order   Int              @default(0)

  form           Form?            @relation(fields: [formId], references: [id])
  formId         String?
  questionAnswer QuestionAnswer[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}

model Answer {
  id String @id @default(uuid())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  userId         String
  questionAnswer QuestionAnswer[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
  form      Form?     @relation(fields: [formId], references: [id])
  formId    String?
  eventId   String
}

model QuestionAnswer {
  id String @id @default(uuid())

  value String?

  option   QuestionOption? @relation(fields: [questionOptionId], references: [id])
  question Question        @relation(fields: [questionId], references: [id])
  answer   Answer          @relation(fields: [answerId], references: [id])

  questionOptionId String?
  questionId       String
  answerId         String

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
}
